if (BuildConfig.isAppMode) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.alibaba.arouter'

android {
    compileSdkVersion BuildConfig.compileSdkVersion
    buildToolsVersion BuildConfig.buildToolsVersion

    defaultConfig {

        minSdkVersion BuildConfig.minSdkVersion
        targetSdkVersion BuildConfig.targetSdkVersion
        versionCode BuildConfig.versionCode
        versionName BuildConfig.versionName
        testInstrumentationRunner BuildConfig.testInstrumentationRunner
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        viewBinding = true
    }

    sourceSets {
        main {
            if (BuildConfig.isAppMode) {
                manifest.srcFile 'src/main/manifest/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //集成开发模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }
            }
        }
    }

    buildTypes {
        // 对应 ALPHA 版本
        debug {
            buildConfigField "String", "VERSION_TYPE", "\"${BuildConfig.VERSION_ALPHA}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        beta {
            buildConfigField "String", "VERSION_TYPE", "\"${BuildConfig.VERSION_BETA}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField "String", "VERSION_TYPE", "\"${BuildConfig.VERSION_RELEASE}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}


kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
        arg("eventBusIndex", "${BuildConfig.applicationId}.eventbus.index.${project.name}EventIndex")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api project(path: ':lib_common')

    testImplementation Android.Junit
    androidTestImplementation AndroidX.TestExtJunit
    androidTestImplementation AndroidX.TestEspresso

    kapt GitHub.GlideCompiler
    kapt GitHub.ARouteCompiler
    kapt GitHub.EventBusAPT
    kapt GitHub.AutoServiceAnnotations
    kapt JetPack.LifecycleCompilerAPT
}